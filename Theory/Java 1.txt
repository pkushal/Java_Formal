String Class:
------------
It is a inbuilt class in Java (google for java api).
public final class String extends Object implements Serializable, Comparable<String>, CharSequence

String are immutable. It is in the package java.lang.String. String is a class  not a datatype.
When ever we do:
	String name = "Java";  name is a object of String class 
	String name = new String ("Java"); is same as the first type of declaration.

	Char c = "J"; here c is variable because Char is a data type.

Once we create a string object, we cannot change it because it create a new memory location of that object, we are doing new operation

String is not a datatype, but a Object type.
If methods are in same class, we don't need object to invoke them, just make
sure you are not invoking a static methods.
Static method cannot call non-static methods but can make calls to the other static memnbers

charAt(int index)
indexOf(char c): position of character c
s.toUpperCase();
s.toLowerCase();
s.substring(int begin, int end);
s.length();
s.equals(String t); // to compare two Strings by value: this is case sensitive
if(s == t) is not valid, it will compare the objects not the values
s.equalsIgnoreCase(String t);


It is not a good idea to count the index to make a substring, so
we do like,

	String s = "string";
	int begin = s.indexOf("s");
	int stop = s.indexOf("g");
	String sub = s.subString(begin, stop);



Exception Handling:
-------------------

Syntax error
Logic error
Run time error

try(...)
catch (<Exception Class> e)
{
 // some code
}
catch()
{
	...
}
catch (Exception e)
{
	System.out.println("This is a general catch...")
	System.out.println(e.stacktrace());
}
When ever an exception occurs, Java will create an object of Exception class.
Catch block will catch the exception object and we need to do the corrective
action. The lines of code after the catch block will be normally executed.

One try can have multiple level of catch but make sure that you are aware of 
the order, put the super class exception at last.


throw and throws:
-----------------
When the calling a method, throw will give the exception object back to the caller.

Inside some method:
catch(InputMismatchException e){
	throw e;
}

And the caller will do like:

try{
	K.add();
}
catch(InputMismatchException e){
 System.out.println("Please try again: ");
 K.add();
}
This thing will go on as long as the user enters the correct input.

To let other know that some method throws exception is using throws keyword in the method and 
it also tell that it will not handle the exception but  throw the exception back to the caller.

void add() throws InputMismatchException{
	//some code
	try{
		//some code
	}
	catch(InputMismatchException e){
		throw e;
	}
	finally{
		//some code
	}
}

throw will throw the exception and throws will tell java that some exception may happen inside me but I am not 
handling the exception.

We will use throw when we want to have control over the program flow. In some
normal case, we can just specify throws in the method and nothing else in there. Caller will do all work

finally:
the code inside the finally block will always be executed. It ensures that the code inside the finally block will be
executed before the control goes to somewhere from the catch block.


Checked and Unchecked exception:
---------------------------------

Checked Exception: are the direct subclasses of exception class except Runtime exception class
					It will for the programmer to handle the exception

Unchecked Exception: Runtime exception and it's subclasses are unchecked
					 Java will not give compilation error even if we do not exception handling
					 Java will not force the programmer to handle the exception.







Java I/O:
----------

All modern I/O are stream based.
Stream is a connection to a source of data or to a destination
for data.
An input stream may be associtated with the keyboard or with a file.
There is input and output stream.
Java has inbuilt classes to make a connection with input sources like keyboard, mouse etc
Package	: import java.io.*
	Open the stream
	Use the stream (read, write or both)
	Close the stream

Java I/O has:
	1. InputStream
		 like xxxInputStream
	2. OutputStream
		 like xxxOutputStream
	3. Reader
	      like xxxReader
	4. Writer
		  like xxxWriter

To do some read operation, we can use the InputStream or 
the Reader. Same for the write operation.


InputStream and Output supports ASCII
Reader and writer supports UTF-8

ASCII cannot read like chinese, french format
UTF-8 supports everything.
Audio, image, video cannot be used with UTF-8, need to use ASCII.
For texts, generally use the UTF-8.
The difference is the encoding and character formats.


File class:
-----------
java.io.file
It help to perform operations on the file like make 
read, copy, delete but not create the connection stream

import java.io.file
File f = new File("C:\\wala\\fileio\\test.txt");
try{
	f.createNewFile();
	System.out.println("File created");
	boolean cr = f.canRead(); // can read permission
	boolean c2 = f.canWrite(); // can write permission
	boolean d = f.isDirectory();// will tell if it is a directory
	f.length(); // will give the size of the file
	f.delete(); // will delete the file

}
catch(IOException e){
	System.out.println("File already exists");
	e.printStackTrace();
}
finally{
	f.close();
}
// this will create an empty file called test.txt in the at location

See the methods in the File class from the java api



If we have directory in the file object, then
File f = new File("C:\\wala\\fileio");
File files[]=f.listFiles();
// it will create array of file object for all the file in that directory.
for(int i=0; i<files.length; i++){
	System.out.println(files[i].getName());
}

Read and Write operation on a file:
-----------------------------------

FileInputStream f = new FileInputStream("C:\\wala\\fileio\\test.txt");// this needs to be in the try catch block
int value =f.read();
// this will read a single character from the file
// this will give the ASCII value of first character
char c = (char) f.read();
int k;
while((k=f.read())!=-1){
	// read method will return -1 when it reaches  end of the file
	char c =(char) k;
	// do not do read here again else it will escapr character...think
	System.out.println(c);
}
f.close();

This class is not efficient. So lets use FileReader or BuffererdReader.

FileReader class:
------------------
FileReader f = new FileReader("C:\\wala\\fileio\\test.txt");
//Other operation is same.
BuffererdReader br = new BuffererdReader(f);
// BuffererdReader internally implements  FileReader..to avoid reading char by char
//It will read char by char and gives line by line... it buffers the characters 
// Increases the performance
Both FileReader and BuffererdReader needs to be in the try catch block

String str = br.readLine();


String s;
while(s= br.readLine()!= null){
// end of the file is null, -1 in the last case
	System.out.println(s);
	// don't read here again, it will skip line
}
// close both bufferreader and the fileReader.

Explore these classes:

BufferedInputStream
LineNumberInputStream
LineNumberReader



Write the content to the file:
------------------------------
// Open the stream
FileOutputStream fout = new FileOutputStream("C:\\wala\\fileio\\test.txt");// this needs to be in the try catch block
// Perform the read/write operations
char c = 'K';
fout.write(c); // It will do the auto conversion, convert to ASCII and write to the file.
// close the stream
fout.close();

// FileOutputStream is not a good choice which when we have to write big files, only good for the small texts.


FileWriter fw = new FileWriter("C:\\wala\\fileio\\test.txt"); // Supports UTF-8
char c = "U";
fw.write(c);
fw.close();


FileWriter fw = new FileWriter("C:\\wala\\fileio\\test.txt", true); // Supports UTF-8
BufferedWriter bw = new BufferedWriter(fw);
bw.write("This is my content to the file. ");
bw.write("\n"); // to have a new line 
bw.write("This is a second line");
bw.flush(); // IMPORTANT to flush the data from the bufferedWriter to the file Writer.
bw.close();
fw.close();

// Here the first line written will be overridden, so need to add a boolean, to append the content to the existing contents

Read from the keyboard and write to a file:
-------------------------------------------
// here we are gonna use bufferedInputStream instead of Scanner object
public class ReadWrite{
	public static void main(String[] args) {
		try{
			System.out.println("Please enter a character: ");
			BufferedInputStream bis = new BufferedInputStream(System.in); // System.in represent the standard input device i.e, KEYBOARD
			char c = (char) fis.read();
			
			FileOutputStream fout = new FileOutputStream("C:\\wala\\fileio\\test.txt");
			fout.write(c);
			System.out.println("Success");
			// put these clode methods in the finally block
			fout.close();
			bis.close();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
	}
}

// For large input strings we need to make use of BufferedReader
public class ReadWrite{
	public static void main(String[] args) {
		try{
			InputStreamReader isr = new InputStreamReader(System.in);
			BufferedReader br = new BufferedReader(isr); 
			// BufferedReader takes a reader object
			//System.in is InputStream Object so we need to make use of InputStreamReader
			// InputStreamReader converts InputStream (System.in) to the Reader


			System.out.println("Please enter a line:");
					
			FileWriter fout = new FileWriter("C:\\wala\\fileio\\test.txt");
			BufferedWriter br = new BufferedWriter(fout);
			String str = br.readLine();

			br.write(str);
			br.flush();

			System.out.println("Success");
		}
		catch(IOException e){
			e.printStackTrace();
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
		finally{
			fout.close();
			br.close();
			isr.close();
			br.close();
		}
	}
}

This method is used when there was no scanner class available. You Scanner to take the input from the keyboard.



PrintStream:
------------

Use to perform write operation, difference is it has the abilty to write various format of data like int, long, char, Object
The previous outputStream only recognized char or String.

public class Kushal{
	public static void main(String[] args) {
		int a = 10;
		int b = 20;
		try{
			PrintStream ps = new PrintStream("C:\\wala\\fileio\\test.txt");
			ps.print("Below are two numbers: ");
			ps.print(a);
			ps.print(b);
			ps.println();
			ps.print("Sum is :");
			ps.print(a+b);
			// NO NEED TO FLUSH INCASE TO STREAMS
			// No need for the fileWriter and bufferedWriter crap
			//Print stream will recognize the data type of the content
			// But the if you use the fileWriter and bufferWriter crap it will give better performance

		}
	}
}

public class Kushal{
	public static void main(String[] args) {
		int a = 10;
		int b = 20;
		try{
			PrintWriter ps = new PrintWriter("C:\\wala\\fileio\\test.txt"); // supports UTF-8
			ps.print("Below are two numbers: ");
			ps.print(a);
			ps.print(b);
			ps.println();
			ps.print("Sum is :");
			ps.print(a+b);
			ps.flush(); // DON'T FORGET TO FLUSH INCASE OF WRITERS
			// THIS PRINTWRITER WILL ALSO RECOGNIZE THE DATA TYPE OF THE CONTENT 
			// No need for the fileWriter and bufferedWriter crap
			//Print stream will recognize the data type of the content
			// But the if you use the fileWriter and bufferWriter crap it will give better performance

		}
	}
}


IF WE DO LIKE:
PrintStream ps = new PrintStream(System.out);
// everything  else same.

It will print the output in the console.
System.out is an output of OutputStream which represents the standard output device, which is console.

System.out:

System is an inbuilt class in Java
out is the inbuilt object which represents output device, console (monitor)
println is the method... println is not a static method...think think..since we are invoking on out object.

There is System.in, System.out, System.err
